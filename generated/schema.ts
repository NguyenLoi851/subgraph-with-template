// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExampleEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExampleEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExampleEntity", id.toString(), this);
    }
  }

  static load(id: string): ExampleEntity | null {
    return changetype<ExampleEntity | null>(store.get("ExampleEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get length(): BigInt {
    let value = this.get("length");
    return value!.toBigInt();
  }

  set length(value: BigInt) {
    this.set("length", Value.fromBigInt(value));
  }
}

export class AbcEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AbcEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AbcEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AbcEntity", id.toString(), this);
    }
  }

  static load(id: string): AbcEntity | null {
    return changetype<AbcEntity | null>(store.get("AbcEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get length(): BigInt {
    let value = this.get("length");
    return value!.toBigInt();
  }

  set length(value: BigInt) {
    this.set("length", Value.fromBigInt(value));
  }
}

export class CreateNewCampaignEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CreateNewCampaignEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CreateNewCampaignEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CreateNewCampaignEntity", id.toString(), this);
    }
  }

  static load(id: string): CreateNewCampaignEntity | null {
    return changetype<CreateNewCampaignEntity | null>(
      store.get("CreateNewCampaignEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get aNumber(): BigInt | null {
    let value = this.get("aNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set aNumber(value: BigInt | null) {
    if (!value) {
      this.unset("aNumber");
    } else {
      this.set("aNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get bAddress(): Bytes | null {
    let value = this.get("bAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set bAddress(value: Bytes | null) {
    if (!value) {
      this.unset("bAddress");
    } else {
      this.set("bAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get campaign(): Bytes | null {
    let value = this.get("campaign");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set campaign(value: Bytes | null) {
    if (!value) {
      this.unset("campaign");
    } else {
      this.set("campaign", Value.fromBytes(<Bytes>value));
    }
  }
}

export class MultipleCampaignEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MultipleCampaignEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MultipleCampaignEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MultipleCampaignEntity", id.toString(), this);
    }
  }

  static load(id: string): MultipleCampaignEntity | null {
    return changetype<MultipleCampaignEntity | null>(
      store.get("MultipleCampaignEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get aNumber(): BigInt | null {
    let value = this.get("aNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set aNumber(value: BigInt | null) {
    if (!value) {
      this.unset("aNumber");
    } else {
      this.set("aNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get kNumber(): BigInt | null {
    let value = this.get("kNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set kNumber(value: BigInt | null) {
    if (!value) {
      this.unset("kNumber");
    } else {
      this.set("kNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get resNumber(): BigInt | null {
    let value = this.get("resNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set resNumber(value: BigInt | null) {
    if (!value) {
      this.unset("resNumber");
    } else {
      this.set("resNumber", Value.fromBigInt(<BigInt>value));
    }
  }
}
